;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))



;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil
		    :font "JetBrains Mono"
		    :weight 'light)

(use-package emojify
  :hook (erc-mode . emojify-mode)
  :commands emojify-mode)

(setq make-backup-file nil)
(setq auto-save-default nil)

(when window-system (global-hl-line-mode t))

(when window-system (global-prettify-symbols-mode t))

(defalias 'yes-or-no-p 'y-or-n-p)

(show-paren-mode 1)

(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room

;; Set up the visible bell
(setq visible-bell t)

(defun kill-whole-word ()
  (interactive)
  (backward-word)
   (kill-word 1))
(global-set-key (kbd "C-x w w") 'kill-whole-word)

(use-package hungry-delete
  :ensure t
  :config (global-hungry-delete-mode))

(line-number-mode 1)
(column-number-mode)


;; Enable line numbers for some modes
(dolist (mode '(text-mode-hook
		prog-mode-hook
		conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 1))))

;; Override some modes which derive from the above
(dolist (mode '(org-mode-hook
		dashboard-hook
		term-mode-hook
		shell-mode-hook
		eshell-mode-hook
		ansi-term-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

(defun copy-whole-line ()
  (interactive)
  (save-excursion
    (kill-new
     (buffer-substring
      (point-at-bol)
      (point-at-eol)))))
(global-set-key (kbd "C-c l l") 'copy-whole-line)

(setq display-time-format "%I:%M %p - %d %B %Y")
(display-time-mode 1)

(use-package fancy-battery
  :ensure t
  :config
    (setq fancy-battery-show-percentage t)
    (setq battery-update-interval 15)
    (if window-system
      (fancy-battery-mode)
      (display-battery-mode)))

(use-package which-key
:ensure t
:init (which-key-mode)
:diminish which-key-mode
:config
(setq which-key-idle-delay 0.3))

(setq electric-pair-pairs '(
			    (?\( . ?\))
			    (?\[ . ?\])
			    (?\{ . ?\})
			    ))
(electric-pair-mode t)

(use-package popup-kill-ring
  :ensure t
  :bind ("M-y" . popup-kill-ring))

(use-package doom-themes
  :if window-system
  :ensure t
  :config
  ;; Enable the theme
  (load-theme 'doom-city-lights t))

;;(use-package doom-themes
  ;;:config
  ;;(load-theme 'doom-city-lights t))

(use-package sudo-edit
  :ensure t
  :bind ("s-e" . sudo-edit))

(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
   (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
(global-set-key (kbd "<C-c return>") 'ansi-term)

(require 'cl-lib)

(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1))))

(when (version<= "9.2" (org-version))
(require 'org-tempo))

(use-package org)
(setq org-src-tab-acts-natively t)
(defun insert-emacs-lisp-block ()
  "Insert an Emacs Lisp source block."
  (interactive)
  (insert "#+begin_src emacs-lisp\n\n#+end_src")
  (forward-line -1))
(define-abbrev org-mode-abbrev-table "els" "" 'insert-emacs-lisp-block)
(add-hook 'org-mode-hook (lambda () (abbrev-mode 1)))

(setq org-agenda-files (append
			(file-expand-wildcards "~/dox/org/*.org")))

(use-package minions
  :hook (doom-modeline-mode . minions-mode))

(use-package doom-modeline
  :after eshell     ;; Make sure it gets hooked after eshell
  :ensure t
  :config
  (doom-modeline-mode 1)
  :custom-face
  (mode-line ((t (:height 0.85))))
  (mode-line-inactive ((t (:height 0.85))))
  :custom
  (doom-modeline-height 15)
  (doom-modeline-bar-width 6)
  (doom-modeline-lsp t)
  (doom-modeline-github nil)
  (doom-modeline-mu4e nil)
  (doom-modeline-irc nil)
  (doom-modeline-minor-modes t)
  (doom-modeline-persp-name nil)
  (doom-modeline-buffer-file-name-style 'truncate-except-project)
  (doom-modeline-major-mode-icon nil))

(setq ido-enable-flex-matching nil)
(setq ido-create-new-buffer 'always)
(setq ido-everywhere t)
(ido-mode 1)

(use-package ido-vertical-mode
  :ensure t
  :init
  (ido-vertical-mode 1))

(use-package smex
  :ensure t
  :init (smex-initialize)
  :bind
  ("M-x" . smex))

(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-center-content t)
  (setq dashboard-startup-banner "~/.emacs.d/avatar.png")
  (setq dashboard-items '((recents  . 5) (bookmarks . 5) (agenda . 5))))
  (setq dashboard-banner-logo-title "Hey Ushakiran, Just do it!")

(global-set-key (kbd "C-x b") 'ibuffer)

(global-set-key (kbd "C-x C-b") 'ido-switch-buffer)

(defun kill-curr-buffer ()
  (interactive)
  (kill-buffer (current-buffer)))==
(global-set-key (kbd "C-x k") 'kill-curr-buffer)

(defun kill-all-buffers ()
  (interactive)
  (mapc 'kill-buffer (buffer-list)))
(global-set-key (kbd "C-M-s-k") 'kill-all-buffers)

;; Unbind keybindings for isearch
(global-unset-key (kbd "C-s"))
(global-unset-key (kbd "C-r"))

(use-package ivy
    :diminish
  :bind (("C-s" . swiper)
	 :map ivy-minibuffer-map
	 ("TAB" . ivy-alt-done)	
	 ("C-l" . ivy-alt-done)
	 ("C-j" . ivy-next-line)
	 ("C-k" . ivy-previous-line)
	 :map ivy-switch-buffer-map
	 ("C-k" . ivy-previous-line)
	 ("C-l" . ivy-done)
	 ("C-d" . ivy-switch-buffer-kill)
	 :map ivy-reverse-i-search-map
	 ("C-k" . ivy-previous-line)
	 ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package avy
  :ensure t
  :bind
    ("M-s" . avy-goto-char))

(use-package rainbow-mode
:ensure t
:init
  (add-hook 'prog-mode-hook 'rainbow-mode))

(use-package rainbow-delimiters
:ensure t
:init
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

(defun config-visit ()
  (interactive)
  (find-file "~/.emacs.d/config.org"))
(global-set-key (kbd "C-c e") 'config-visit)

(defun config-reload ()
  (interactive)
  (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
(global-set-key (kbd "C-c r") 'config-reload)

(use-package highlight-indent-guides
 :ensure t
 :defer t
 :hook (prog-mode . highlight-indent-guides-mode)
 :config
 (setq highlight-indent-guides-method 'character)
 (setq highlight-indent-guides-character ?\|)
 (setq highlight-indent-guides-responsive 'top))

(use-package switch-window
  :ensure t
  :config
  (setq switch-window-input-style 'minibuffer)
  (setq switch-window-increase 4)
  (setq switch-window-threshold 2)
  (setq switch-window-shortcut-style 'qwerty)
  (setq switch-window-qwerty-shortcuts
	'("a" "s" "d" "f" "j" "k" "l"))
  :bind
  ([remap other-window] . switch-window))

(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)

(use-package company
  :ensure t
  :config
  (add-hook 'after-init-hook 'global-company-mode))

(use-package centaur-tabs
:if window-system
:defer t
:demand
:init
;; Set the style to rounded with icons
(setq centaur-tabs-style "bar")
(setq centaur-tabs-set-icons t)

:config
;; Enable centaur-tabs
(centaur-tabs-mode t))

(use-package treemacs
  :ensure t
  :defer t
  :bind
  (("C-c t" . treemacs))
  :config
  (setq treemacs-width 30)
  (setq-local mode-line-format nil))

(use-package projectile
  :ensure t
  :defer t
  :config
  ;; Enable Projectile globally
  (setq projectile-completion-system 'ido)
  (setq ido-enable-flex-matching t)
  (projectile-mode 1))

(use-package lsp-mode
  :ensure t
  :defer t
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (setq lsp-headerline-breadcrumb-enable nil))

(use-package lsp-ui
  :ensure t
  :defer t)

(use-package dap-mode
  :after lsp-mode
  :ensure t
  :defer t)

(use-package web-mode
:ensure t
:defer t
:config
(setq
 web-mode-markup-indent-offset 2
 web-mode-css-indent-offset 2
 web-mode-code-indent-offset 2
 web-mode-style-padding 2
 web-mode-script-padding 2
 web-mode-enable-auto-closing t
 web-mode-enable-auto-opening t
 web-mode-enable-auto-pairing t
 web-mode-enable-auto-indentation t)
:mode
(".html$" "*.php$" "*.tsx"))

(use-package emmet-mode
  :ensure t
  :defer t)

(use-package tide
  :ensure t
  :defer t
  :config
  (setq company-tooltip-align-annotations t)
  (add-hook 'before-save-hook 'tide-format-before-save))
(add-hook 'typescript-mode-hook #'setup-tide-mode)

(defun setup-tide-mode ()
  "Set up Tide mode."
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save-mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  (company-mode +1))

(add-hook 'web-mode-hook
	    (lambda ()
	      (when (string-equal "tsx" (file-name-extension buffer-file-name))
		(setup-tide-mode))))

(use-package lsp-pyright
:ensure t
:defer t
:hook (python-mode . (lambda ()
			 (setq indent-tabs-mode t)
			 (setq tab-width 4)
			 (setq python-indent-offset 4)
			 (company-mode 1)
			 (require 'lsp-pyright)
			 (pyvenv-autoload)
			 (lsp))))

(use-package pyvenv
:ensure t
:defer t)

(defun pyvenv-autoload ()
  (require 'pyvenv)
  (require 'projectile)
  (interactive)
  "auto activate venv directory if exists"
  (f-traverse-upwards (lambda (path)
			  (let ((venv-path (f-expand "env" path)))
			    (when (f-exists? venv-path)
			      (pyvenv-activate venv-path))))))
(add-hook 'python-mode 'pyvenv-autoload)

(use-package magit
:ensure t
:defer t)

(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;;(require 'calfw)
;;(require 'calfw-org)

;;(use-package calfw-org) '
;;(add-to-list 'load-path "~/.emacs.d/calfw")
;;(add-to-list 'load-path "~/.emacs.d/site-lisp/calfw-blocks")
